(global-set-key (kbd "C-x c") 'graphviz-calcite-error)

(defun graphviz-calcite-error ()
  (interactive)
  (with-current-buffer (get-buffer "*compilation*")
    (save-excursion
      (end-of-buffer)
      (re-search-backward "^digraph G {$" nil nil)
      (graphviz-current))))

(defun graphviz-calcite-error0 ()
  (interactive)
  (with-current-buffer (get-buffer "*compilation*")
    (save-excursion
      (beginning-of-buffer)
      (re-search-forward "^Graphviz:$" nil nil)
      (let ((start (point)))
        (re-search-forward "^}$" nil nil)
        (let ((end (point)))
          (graphviz-region start end))))))

(global-set-key (kbd "C-c G") 'graphviz-current)

(defun graphviz-current ()
  (interactive)
  (save-excursion
    (re-search-backward "^digraph G {$" nil nil)
    (let ((start (point)))
      (re-search-forward "^}$" nil nil)
      (let ((end (point)))
        (graphviz-region start end)))))

(defun graphviz-region (&optional b e)
  (interactive "r")
  ;(message "RG %d - %d" b e)
  (let ((fname (make-temp-file "calcitegraph" nil ".svg")))
    (let ((cmd (format "dot -Tsvg -o %s" fname)))
      (message "CMD %s" cmd)
      (call-shell-region b e cmd)
      (start-process "graphviz" "*graphviz*" "google-chrome" fname))))
  ;;(find-file fname))))

(defun graphviz-region0 (&optional b e)
  (interactive "r")
  ;;(message "RG %d - %d" b e)
  (let ((fname (make-temp-file "calcitegraph" nil ".pdf")))
    (let ((cmd (format "dot -Tpdf -o %s" fname)))
      (message "CMD %s" cmd)
      (call-shell-region b e cmd)
      (start-process "graphviz" "*graphviz*" "evince" "-f" fname))))
  ;;(find-file fname))))

(defun graphviz-region1 (&optional b e)
  (interactive "r")
  ;;(message "RG %d - %d" b e)
  (let ((fname (make-temp-file "calcitegraph" nil ".png")))
    (let ((cmd (format "dot -Tpng -o %s" fname)))
      (message "CMD %s" cmd)
      (call-shell-region b e cmd)
      (find-file fname))))

(defun graphviz-region2 (&optional b e)
  (interactive "r")
  ;;(message "RG %d - %d" b e)
  (let ((fname (make-temp-file "calcitegraph" nil ".png")))
    (let ((cmd (format "dot -Tpng -o %s && (eog %s &)" fname fname)))
      (message "CMD %s" cmd)
      (call-shell-region b e cmd))))
